CREATE DATABASE light_service;




-- Create table for Role
CREATE TABLE `Role`  (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    DateCreated DATETIME NOT NULL
);

-- Create table for Status
CREATE TABLE `Status` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    DateCreated DATETIME NOT NULL
);

-- Create table for PaymentMethod
CREATE TABLE `PaymentMethod` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    DateCreated DATETIME NOT NULL
);


-- Create table for Customer
CREATE TABLE `Customer` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Fullname VARCHAR(100) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    Address TEXT NOT NULL,
    Phone VARCHAR(15) NOT NULL,
    Password TEXT NOT NULL,
    DateCreated DATETIME NOT NULL
);

-- Create table for Staff
CREATE TABLE `Staff` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Fullname VARCHAR(100) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    Phone VARCHAR(15) NOT NULL,
    RoleId INT,
    PasswordHash TEXT,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (RoleId) REFERENCES Role(Id) ON DELETE CASCADE
);

-- Create table for StaffStatus
CREATE TABLE `StaffStatus` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    StaffId INT,
    StatusId INT,
    ModifyBy INT,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE,
    FOREIGN KEY (StatusId) REFERENCES Status(Id) ON DELETE CASCADE,
    FOREIGN KEY (ModifyBy) REFERENCES Staff(Id) ON DELETE CASCADE
);

-- Create table for Categories
CREATE TABLE `Categories` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    DateCreated DATETIME NOT NULL
);

-- Create table for Products
CREATE TABLE `Products` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    CategoryId INT,
    Description TEXT,
    ImagePath TEXT,
    Price DOUBLE NOT NULL,
    DiscountPrice DOUBLE,
    Stock INT NOT NULL,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (CategoryId) REFERENCES Categories(Id) ON DELETE CASCADE
);

CREATE TABLE `Order` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    CustomerId INT NOT NULL,
    TotalAmount DOUBLE NOT NULL,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (CustomerId) REFERENCES Customer(Id) ON DELETE CASCADE
);

-- Create table for OrderStatus
CREATE TABLE `OrderStatus` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    OrderId INT,
    StatusId INT,
    StaffId INT,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (OrderId) REFERENCES `Order`(Id) ON DELETE CASCADE,
    FOREIGN KEY (StatusId) REFERENCES Status(Id) ON DELETE CASCADE,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE
);

-- Create table for Bundle
CREATE TABLE `Bundle` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    ImagePath TEXT,
    Description TEXT,
    Price DOUBLE NOT NULL,
    DiscountPrice DOUBLE,
    DateCreated DATETIME NOT NULL
);

CREATE TABLE Payment (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    CustomerId INT NOT NULL,
    OrderId INT NOT NULL,
    PaymentMethodId INT NOT NULL,
    DateCreated DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (CustomerId) REFERENCES Customer(Id) ON DELETE CASCADE,
    FOREIGN KEY (OrderId) REFERENCES `Order`(Id) ON DELETE CASCADE,
    FOREIGN KEY (PaymentMethodId) REFERENCES PaymentMethod(Id) ON DELETE CASCADE
);

CREATE TABLE ManualPayment (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    PaymentId INT NOT NULL UNIQUE,
    ScreenShotImage TEXT,
    DateCreated DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PaymentId) REFERENCES Payment(Id) ON DELETE CASCADE
);


CREATE TABLE PaypalPayment (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    PaymentId INT NOT NULL UNIQUE,
    TransactionId TEXT NOT NULL,
    DateCreated DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PaymentId) REFERENCES Payment(Id) ON DELETE CASCADE
);

CREATE TABLE `BundleProducts` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    BundleId INT NOT NULL,
    ProductId INT NOT NULL,
    Quantity INT NOT NULL,
    DateCreated DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (BundleId) REFERENCES Bundle(Id) ON DELETE CASCADE,
    FOREIGN KEY (ProductId) REFERENCES Products(Id) ON DELETE CASCADE,
    UNIQUE (BundleId, ProductId)
);


-- Create table for Event
CREATE TABLE `Event` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    ImagePath TEXT,
    Description TEXT,
    Price DOUBLE NOT NULL,
    DiscountPrice DOUBLE,
    DateCreated DATETIME NOT NULL
);


CREATE TABLE `EventProducts` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    EventId INT NOT NULL,
    ProductId INT NOT NULL,
    Quantity INT NOT NULL,
    DateCreated DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (EventId) REFERENCES Event(Id) ON DELETE CASCADE,
    FOREIGN KEY (ProductId) REFERENCES Products(Id) ON DELETE CASCADE,
    UNIQUE (EventId, ProductId)
);

-- Create table for EventStatus
CREATE TABLE `EventStatus` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    EventId INT,
    StatusId INT,
    StaffId INT,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (EventId) REFERENCES Event(Id) ON DELETE CASCADE,
    FOREIGN KEY (StatusId) REFERENCES Status(Id) ON DELETE CASCADE,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE
);


-- Create table for BundleStatus
CREATE TABLE `BundleStatus` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    BundleId INT,
    StatusId INT,
    StaffId INT,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (BundleId) REFERENCES Bundle(Id) ON DELETE CASCADE,
    FOREIGN KEY (StatusId) REFERENCES Status(Id) ON DELETE CASCADE,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE
);

CREATE TABLE `OrderItem` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    OrderId INT NOT NULL,
    ProductId INT NULL,
    EventId INT NULL,
    BundleId INT NULL,
    Quantity INT NOT NULL,
    UnitPrice DOUBLE NOT NULL,
    Subtotal DOUBLE NOT NULL,
    OrderType ENUM('product', 'bundle','event') NOT NULL,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (OrderId) REFERENCES `Order`(Id) ON DELETE CASCADE,
    FOREIGN KEY (ProductId) REFERENCES Products(Id) ON DELETE CASCADE,
    FOREIGN KEY (EventId) REFERENCES Event(Id) ON DELETE CASCADE,
    FOREIGN KEY (BundleId) REFERENCES Bundle(Id) ON DELETE CASCADE
);

-- Create table for ProductStatus
CREATE TABLE `EventRental` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    OrderItemId INT,
    RentalStartDate DATETIME,
    RentalEndDate DATETIME,
    `Returned` BOOLEAN NOT NULL DEFAULT FALSE,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (OrderItemId) REFERENCES OrderItem(Id) ON DELETE CASCADE
);

-- Receipt Table
CREATE TABLE Receipt (
  Id INT PRIMARY KEY AUTO_INCREMENT,
  OrderId INT,
  ExternalId Text,
  ReceiptPath Text,
  DateCreated DATETIME,
  FOREIGN KEY (OrderId) REFERENCES `Order`(Id) ON DELETE CASCADE
);

-- Create table for CustomerStatus
CREATE TABLE `CustomerStatus` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    UserId INT,
    StatusId INT,
    StaffId INT,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (UserId) REFERENCES Customer(Id) ON DELETE CASCADE,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE
);

-- Create table for ProductStatus
CREATE TABLE `ProductStatus` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    ProductId INT,
    StatusId INT,
    DateCreated DATETIME NOT NULL,
    StaffId INT,
    FOREIGN KEY (ProductId) REFERENCES Products(Id) ON DELETE CASCADE,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE
);

-- Create table for Installation
CREATE TABLE `Installation` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    StaffId INT,
    OrderId INT,
    Location Text,
    InstallationCost DOUBLE,
    InstallationDate DATETIME NOT NULL,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE,
    FOREIGN KEY (OrderId) REFERENCES `Order`(Id) ON DELETE CASCADE
);

-- Create table for InstallationStatus
CREATE TABLE `InstallationStatus` (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    InstallationId INT,
    StatusId INT,
    StaffId INT,
    DateCreated DATETIME NOT NULL,
    FOREIGN KEY (InstallationId) REFERENCES Installation(Id) ON DELETE CASCADE,
    FOREIGN KEY (StaffId) REFERENCES Staff(Id) ON DELETE CASCADE
);


-- Create table for Queries
CREATE TABLE Query (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    FullName VARCHAR(100) NOT NULL,
    Email VARCHAR(150) NOT NULL,
    Subject VARCHAR(150),
    Message TEXT NOT NULL,
    IsCustomer BOOLEAN DEFAULT FALSE,
    CustomerId INT,
    DateCreated DATETIME DEFAULT CURRENT_TIMESTAMP,
    Seen BOOLEAN DEFAULT FALSE,
    CONSTRAINT fk_customer FOREIGN KEY (CustomerId) REFERENCES Customer(Id) ON DELETE SET NULL
);



-- Add Statuses
INSERT INTO `Status`(`Name`, `Description`, `DateCreated`) VALUES 
('ACTIVE', 'The order or task is currently active or ongoing.', NOW()),
('INACTIVE', 'The order or task is inactive or disabled.', NOW()),
('READY-FOR-PICKUP', 'The order is ready to be picked up by the customer.', NOW()),
('IN-TRANSIT', 'The order is currently on its way to the customer.', NOW()),
('INSTALLED', 'The installation has been completed.', NOW()),
('COMPLETED', 'The order or task has been fully completed.', NOW()),
('CONFIRMED', 'The order or task has been confirmed.', NOW()),
('CANCELLED', 'The order has been cancelled and will not be processed further.', NOW()),
('PENDING', 'The order is awaiting payment or approval.', NOW()),
('PROCESSING', 'The order is being processed.', NOW()),
('COLLECTED', 'The order has been collected by the customer.', NOW()),
('READY-FOR-INSTALLATION', 'The order is ready for installation.', NOW()),
('RE-STOCK', 'The item has been returned to inventory or is restocked.', NOW());

-- Add Roles
INSERT INTO Role (Name) VALUES('Installer');
INSERT INTO Role (Name) VALUES('Admin');
INSERT INTO Role (Name) VALUES('Viewer');

-- Add Payment PaymentMethod
INSERT INTO `PaymentMethod` (`Name`, `Description`, `DateCreated`) VALUES ('Paypal', 'Direct Payment', '2025-04-26 00:42:49.000000');
INSERT INTO `PaymentMethod` (`Name`, `Description`, `DateCreated`) VALUES ('Online Payment', 'Manual Payment', '2025-04-26 00:42:49.000000');


-- Add First Admin
INSERT INTO Staff (Fullname, Email, Phone, PasswordHash, RoleId) VALUES ('Hans','admin@gmail.com','5912','$2b$12$wxKWqCNdt6tvvgsXw/jtNe2ICYdbO4M9E7wUAywawnRGWN2J1mCQu', (SELECT Id FROM Role WHERE Name = 'Admin'));
-- ADMIN LOGIN: admin@gmail.com  adminHans


-- Add Admin Status
INSERT INTO `StaffStatus` ( `StaffId`, `StatusId`, `DateCreated`) VALUES ((SELECT Id FROM Staff WHERE Phone = '5912'),(SELECT Id FROM Status WHERE Name = 'ACTIVE'), '2025-04-25 21:19:04.000000');

-- sb-kykw36542808@personal.example.com

-- mt7^z6WJ


-- HOSTING: P012&*212pasx